package de.thaso.swa.db.store.cart;

import de.thaso.swa.db.common.exception.DatabaseError;
import de.thaso.swa.db.common.exception.DatabaseException;
import de.thaso.swa.db.store.utils.DatabaseExceptionCodeMatcher;
import mockit.Expectations;
import mockit.Injectable;
import mockit.Mock;
import mockit.MockUp;
import mockit.Tested;
import mockit.Verifications;
import mockit.integration.junit4.JMockit;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.nullValue;
import static org.hamcrest.core.StringContains.containsString;
import static org.junit.Assert.assertThat;

/**
 * ShoppingCartDAOTest
 *
 * @author thaler
 * @since 13.09.16
 */
@RunWith(JMockit.class)
public class ShoppingCart2DAOTest {

    public static final DatabaseExceptionCodeMatcher EXCEPTION_MATCHER_ENTITY_NOT_FOUND
            = new DatabaseExceptionCodeMatcher(DatabaseError.ENTITY_NOT_FOUND);

    @Tested
    private ShoppingCartDAO underTest;

    @Injectable
    private EntityManager entityManager;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    private Long primaryKey;
    private ShoppingCartEntity shoppingCartEntity;

    @Before
    public void setUp() {
        //initMocks(this);

        primaryKey = 1L;
        shoppingCartEntity = new ShoppingCartEntity();
        new Expectations() {{
            entityManager.find(ShoppingCartEntity.class, primaryKey); result = shoppingCartEntity;
        }};
//        doReturn(shoppingCartEntity).when(entityManager).find(ShoppingCartEntity.class, primaryKey);
//        when(entityManager.find(ShoppingCartEntity.class, primaryKey)).thenReturn(shoppingCartEntity);
    }

    @Test
    public void storeShoppingCart() {
        // when
        final ShoppingCartEntity result = underTest.storeShoppingCart(shoppingCartEntity);
        // then
        //verify(entityManager).persist(shoppingCartEntity);
        new Verifications() {{
            entityManager.persist(shoppingCartEntity); times = 1;
        }};
        assertThat(result, is(shoppingCartEntity));
    }

    @Test
    public void findShoppingCart() {
        // when
        final ShoppingCartEntity result = underTest.findShoppingCartById(primaryKey);
        // then
        assertThat(result, is(shoppingCartEntity));
    }

    @Test
    public void findShoppingCart_whenPrimaryKeyNotFound() {
        // given
        new Expectations() {{
            entityManager.find(ShoppingCartEntity.class, primaryKey); result = null;
        }};
//        doReturn(null).when(entityManager).find(ShoppingCartEntity.class, primaryKey);
//        when(entityManager.find(ShoppingCartEntity.class, primaryKey)).thenReturn(null);
        // when
        final ShoppingCartEntity result = underTest.findShoppingCartById(primaryKey);
        // then
        assertThat(result, is(nullValue()));
    }

    @Test
    public void loadShoppingCart() {
        // when
        final ShoppingCartEntity result = underTest.loadShoppingCartById(primaryKey);
        // then
        assertThat(result, is(shoppingCartEntity));
    }

    @Test
    public void loadShoppingCart_whenPrimaryKeyNotFound() {
        // given
        new Expectations() {{
            entityManager.find(ShoppingCartEntity.class, primaryKey); result = null;
        }};
//        doReturn(null).when(entityManager).find(ShoppingCartEntity.class, primaryKey);
//        when(entityManager.find(ShoppingCartEntity.class, primaryKey)).thenReturn(null);
        exception.expect(DatabaseException.class);
        exception.expectMessage(containsString(" " + primaryKey.toString() + " "));
        exception.expect(EXCEPTION_MATCHER_ENTITY_NOT_FOUND);
        // when
        final ShoppingCartEntity result = underTest.loadShoppingCartById(primaryKey);
    }

    @Test
    public void findByName() {
        // given
        final TypedQuery query = new MockUp<TypedQuery>() {

            @Mock
            public void setParameter(final String parameter, final Object value) {
            }

            @Mock
            public void maxResults(final int count) {
            }

            @Mock
            public List getResultList() {
                return null;
            }

            //mock(TypedQuery.class);
        }.getMockInstance();
        new Expectations() {{
            entityManager.createNamedQuery(ShoppingCartEntity.FIND_BY_NAMES,ShoppingCartEntity.class); result = query;
        }};
//        doReturn(query).when(entityManager).createNamedQuery(ShoppingCartEntity.FIND_BY_NAMES,ShoppingCartEntity.class);
//        when(entityManager.createNamedQuery(ShoppingCartEntity.FIND_BY_NAMES,ShoppingCartEntity.class)).thenReturn(query);
        final List<ShoppingCartEntity> shoppingCartEntityList = new ArrayList<>();
//        when(query.getResultList()).thenReturn(shoppingCartEntityList);
        // when
        final List<ShoppingCartEntity> result = underTest.findByName("Hugo");
        // then
        assertThat(result,is(shoppingCartEntityList));
//        verify(query).setParameter("name","Hugo");
//        verify(query).setMaxResults(10);
    }
}